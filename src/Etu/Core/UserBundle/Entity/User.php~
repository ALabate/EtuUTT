<?php

namespace Etu\Core\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Security\Core\User\UserInterface;

use Etu\Core\CoreBundle\Framework\Definition\Permission;
use Etu\Core\CoreBundle\Framework\EtuKernel;
use Etu\Core\CoreBundle\Framework\Module\PermissionsCollection;
use Etu\Core\UserBundle\Collection\UserOptionsCollection;
use Etu\Core\UserBundle\Ldap\Model\User as LdapUser;

use Imagine\Gd\Image;
use Imagine\Gd\Imagine;
use Imagine\Image\Box;
use Imagine\Image\Color;
use Imagine\Image\Point;

/**
 * User
 *
 * @ORM\Table(
 *      name="etu_users",
 *      uniqueConstraints={@ORM\UniqueConstraint(name="search", columns={"login", "mail"})}
 * )
 * @ORM\Entity
 * @Gedmo\SoftDeleteable(fieldName="deletedAt")
 */
class User implements UserInterface, \Serializable
{
	const SEX_MALE = 'male';
	const SEX_FEMALE = 'female';

	const PRIVACY_PUBLIC = 100;
	const PRIVACY_PRIVATE = 200;

	static public $branches = array(
		'ISI' => 'ISI', 'MTE' => 'MTE', 'SI' => 'SI',
		'SIT' => 'SIT', 'SM' => 'SM', 'SRT' => 'SRT',
		'TC' => 'TC'
	);

	static public $levels = array(
		'1' => '1', '2' => '2', '3' => '3', '4' => '4', '5' => '5',
		'6' => '6', '7' => '7', '8' => '8', '9' => '9', '10' => '10'
	);

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="login", type="string", length=50)
	 */
	protected $login;

	/**
	 * Password for who are not in CAS
	 *
	 * @var string
	 *
	 * @ORM\Column(name="password", type="string", length=100, nullable=true)
	 */
	protected $password;

    /**
     * @var integer
     *
     * @ORM\Column(name="studentId", type="integer", nullable=true)
     */
    protected $studentId;

    /**
     * @var string
     *
     * @ORM\Column(name="mail", type="string", length=100, nullable=true)
     */
    protected $mail;

    /**
     * @var string
     *
     * @ORM\Column(name="fullName", type="string", length=255, nullable=true)
     */
    protected $fullName;

    /**
     * @var string
     *
     * @ORM\Column(name="firstName", type="string", length=255, nullable=true)
     */
    protected $firstName;

    /**
     * @var string
     *
     * @ORM\Column(name="lastName", type="string", length=255, nullable=true)
     */
    protected $lastName;

    /**
     * @var string
     *
     * @ORM\Column(name="formation", type="string", length=255, nullable=true)
     */
    protected $formation;

    /**
     * @var string
     *
     * @ORM\Column(name="niveau", type="string", length=255, nullable=true)
     */
    protected $niveau;

    /**
     * @var string
     *
     * @ORM\Column(name="filiere", type="string", length=255, nullable=true)
     */
    protected $filiere;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="phoneNumber", type="string", length=30, nullable=true)
	 */
	protected $phoneNumber;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="phoneNumberPrivacy", type="integer")
	 */
	protected $phoneNumberPrivacy;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255, nullable=true)
     */
    protected $title;

    /**
     * @var string
     *
     * @ORM\Column(name="room", type="string", length=255, nullable=true)
     */
    protected $room;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="avatar", type="string", length=255, nullable=true)
	 */
	protected $avatar;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="sex", type="string", length=50, nullable=true)
	 */
	protected $sex;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="sexPrivacy", type="integer")
	 */
	protected $sexPrivacy;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="nationality", type="string", length=50, nullable=true)
	 */
	protected $nationality;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="nationalityPrivacy", type="integer")
	 */
	protected $nationalityPrivacy;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="adress", type="string", length=100, nullable=true)
	 */
	protected $adress;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="adressPrivacy", type="integer")
	 */
	protected $adressPrivacy;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="postalCode", type="string", length=50, nullable=true)
	 */
	protected $postalCode;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="postalCodePrivacy", type="integer")
	 */
	protected $postalCodePrivacy;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="city", type="string", length=100, nullable=true)
	 */
	protected $city;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="cityPrivacy", type="integer")
	 */
	protected $cityPrivacy;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="country", type="string", length=50, nullable=true)
	 */
	protected $country;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="countryPrivacy", type="integer")
	 */
	protected $countryPrivacy;

	/**
	 * @var \DateTime
	 *
	 * @ORM\Column(name="birthday", type="date", nullable=true)
	 */
	protected $birthday;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="birthdayPrivacy", type="integer")
	 */
	protected $birthdayPrivacy;

	/**
	 * @var boolean
	 *
	 * @ORM\Column(name="birthdayDisplayOnlyAge", type="boolean")
	 */
	protected $birthdayDisplayOnlyAge;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="personnalMail", type="string", length=100, nullable=true)
	 */
	protected $personnalMail;

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="personnalMailPrivacy", type="integer")
	 */
	protected $personnalMailPrivacy;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="language", type="string", length=10, nullable=true)
	 */
	protected $language;

	/**
	 * @var boolean
	 *
	 * @ORM\Column(name="isStudent", type="boolean")
	 */
	protected $isStudent;

	/**
	 * @var string
	 *     > For trombi
	 *
	 * @ORM\Column(name="surnom", type="string", length=100, nullable=true)
	 */
	protected $surnom;

	/**
	 * @var string
	 *     > For trombi
	 *
	 * @ORM\Column(name="jadis", type="text", nullable=true)
	 */
	protected $jadis;

	/**
	 * @var string
	 *     > For trombi
	 *
	 * @ORM\Column(name="passions", type="text", nullable=true)
	 */
	protected $passions;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="website", type="string", length=100, nullable=true)
	 */
	protected $website;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="facebook", type="string", length=100, nullable=true)
	 */
	protected $facebook;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="twitter", type="string", length=100, nullable=true)
	 */
	protected $twitter;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="linkedin", type="string", length=100, nullable=true)
	 */
	protected $linkedin;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="viadeo", type="string", length=100, nullable=true)
	 */
	protected $viadeo;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="uvs", type="string", length=100, nullable=true)
	 */
	protected $uvs;

	/**
	 * LDAP root informations
	 *
	 * @var object
	 *
	 * @ORM\Column(name="ldapInformations", type="object", nullable=true)
	 */
	protected $ldapInformations;

	/**
	 * Keep active even if not found in LDAP (for old students, external users, etc.)
	 *
	 * @var boolean
	 *
	 * @ORM\Column(name="keepActive", type="boolean")
	 */
	protected $keepActive;

	/**
	 * Added permissions
	 *      => used for administration permissions
	 *
	 * @var array
	 *
	 * @ORM\Column(name="permissions", type="array")
	 */
	protected $permissions = array();

	/**
	 * Removed permissions
	 *      => used for classic permissions that everyone but this specific user have
	 *
	 * @var array
	 *
	 * @ORM\Column(name="removedPermissions", type="array")
	 */
	protected $removedPermissions = array();

	/**
	 * If the user is admin, he has all permissions, even from the new modules
	 *
	 * @var boolean
	 *
	 * @ORM\Column(name="isAdmin", type="boolean")
	 */
	protected $isAdmin;

	/**
	 * Read-only mode enabled fo this user?
	 *
	 * @var boolean
	 *
	 * @ORM\Column(name="isReadOnly", type="boolean")
	 */
	protected $isReadOnly;

	/**
	 * Read-only expiration date
	 *
	 * @var \DateTime
	 *
	 * @ORM\Column(name="readOnlyExpirationDate", type="datetime")
	 */
	protected $readOnlyExpirationDate;

	/**
	 * Badges
	 *
	 * @var array
	 *
	 * @ORM\Column(name="badges", type="array")
	 */
	protected $badges = array();

	/**
	 * Modules options (no format, just an array stored to be sued by modules as they want)
	 *
	 * @var UserOptionsCollection
	 *
	 * @ORM\Column(name="options", type="object")
	 */
	protected $options;

	/**
	 * Last visit date
	 *
	 * @var \DateTime
	 *
	 * @ORM\Column(name="lastVisitHome", type="datetime")
	 */
	protected $lastVisitHome;

	/**
	 * @var \DateTime $created
	 *
	 * @Gedmo\Timestampable(on="create")
	 * @ORM\Column(name="createdAt", type="datetime")
	 */
	protected $createdAt;

	/**
	 * @var \DateTime $updated
	 *
	 * @Gedmo\Timestampable(on="update")
	 * @ORM\Column(name="updatedAt", type="datetime")
	 */
	protected $updatedAt;

	/**
	 * @var \DateTime $deletedAt
	 *
	 * @ORM\Column(name="deletedAt", type="datetime")
	 */
	protected $deletedAt;

	/**
	 * @var Member[] $memberships
	 *
	 * @ORM\OneToMany(targetEntity="\Etu\Core\UserBundle\Entity\Member", mappedBy="user")
	 * @ORM\JoinColumn()
	 */
	protected $memberships;

	/**
	 * Temporary variable to store uploaded file during photo update
	 *
	 * @var UploadedFile
	 */
	public $file;

	/**
	 * Is testing context ?
	 *
	 * @var boolean
	 */
	public $testingContext;



	/*
	 * Methods
	 */

	public function __construct()
	{
		$this->testingContext = false;
		$this->keepActive = false;
		$this->isStudent = true;
		$this->isReadOnly = false;
		$this->isDeleted = false;
		$this->readOnlyExpirationDate = new \DateTime();
		$this->isAdmin = false;
		$this->avatar = 'default-avatar.png';
		$this->phoneNumberPrivacy = self::PRIVACY_PUBLIC;
		$this->sexPrivacy = self::PRIVACY_PUBLIC;
		$this->nationalityPrivacy = self::PRIVACY_PUBLIC;
		$this->adressPrivacy = self::PRIVACY_PUBLIC;
		$this->postalCodePrivacy = self::PRIVACY_PUBLIC;
		$this->cityPrivacy = self::PRIVACY_PUBLIC;
		$this->countryPrivacy = self::PRIVACY_PUBLIC;
		$this->birthdayPrivacy = self::PRIVACY_PUBLIC;
		$this->birthdayDisplayOnlyAge = false;
		$this->personnalMailPrivacy = self::PRIVACY_PUBLIC;
		$this->options = new UserOptionsCollection();
		$this->badges = array();
		$this->permissions = array();
		$this->ldapInformations = new LdapUser();
		$this->uvs = '';
		$this->lastVisitHome = new \DateTime('0000-00-00 00:00:00');
	}

	public function __toString()
	{
		return $this->fullName;
	}

	/**
	 * Return available branches and levels for forms
	 *
	 * @return array
	 */
	static public function availableBranches()
	{
		$result = array();

		foreach (self::$branches as $branch) {
			foreach (self::$levels as $level) {
				$result[] = $branch.$level;
			}
		}

		return $result;
	}

	/**
	 * Upload the photo
	 *
	 * @return boolean
	 */
	public function upload()
	{
		if (null === $this->file) {
			return false;
		}

		/*
		 * Upload and resize
		 */
		$imagine = new Imagine();

		// Create a transparent image
		$image = $imagine->create(new Box(200, 200), new Color('000', 100));

		// Create the logo thumbnail in a 200x200 box
		$thumbnail = $imagine->open($this->file->getPathname())
			->thumbnail(new Box(200, 200), Image::THUMBNAIL_INSET);

		// Paste point
		$pastePoint = new Point(
			(200 - $thumbnail->getSize()->getWidth()) / 2,
			(200 - $thumbnail->getSize()->getHeight()) / 2
		);

		// Paste the thumbnail in the transparent image
		$image->paste($thumbnail, $pastePoint);

		// Save the result
		$image->save(__DIR__ . '/../../../../../web/photos/'.$this->getLogin().'.png');

		$this->avatar = $this->getLogin().'.png';

		return true;
	}

	/**
	 * @return boolean
	 */
	public function getIsOrga()
	{
		return false;
	}

	/**
	 * @return integer
	 */
	public function getProfileCompletion()
	{
		$infos = array(
			$this->phoneNumber, $this->sex, $this->nationality, $this->adress, $this->postalCode, $this->city,
			$this->country, $this->birthday, $this->personnalMail
		);

		$completion = 0;
		$count = 0;

		foreach ($infos as $value) {
			$count++;

			if (! empty($value)) {
				$completion++;
			}
		}

		return round($completion / $count, 2) * 100;
	}

	/**
	 * @inheritDoc
	 */
	public function getUsername()
	{
		return $this->login;
	}

	/**
	 * @inheritDoc
	 */
	public function getSalt()
	{
		return md5($this->login.$this->mail);
	}

	/**
	 * @inheritDoc
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * @inheritDoc
	 */
	public function getRoles()
	{
		return array('ROLE_USER');
	}

	/**
	 * @inheritDoc
	 */
	public function eraseCredentials()
	{
	}

	/**
	 * @see \Serializable::serialize()
	 */
	public function serialize()
	{
		return serialize(array(
			$this->id,
			$this->login,
			$this->password,
			$this->studentId,
			$this->mail,
			$this->fullName,
			$this->firstName,
			$this->lastName,
			$this->formation,
			$this->niveau,
			$this->filiere,
			$this->phoneNumber,
			$this->phoneNumberPrivacy,
			$this->title,
			$this->room,
			$this->avatar,
			$this->sex,
			$this->sexPrivacy,
			$this->nationality,
			$this->nationalityPrivacy,
			$this->adress,
			$this->adressPrivacy,
			$this->postalCode,
			$this->postalCodePrivacy,
			$this->city,
			$this->cityPrivacy,
			$this->country,
			$this->countryPrivacy,
			$this->birthday,
			$this->birthdayPrivacy,
			$this->birthdayDisplayOnlyAge,
			$this->personnalMail,
			$this->personnalMailPrivacy,
			$this->language,
			$this->isStudent,
			$this->surnom,
			$this->jadis,
			$this->passions,
			$this->website,
			$this->facebook,
			$this->twitter,
			$this->linkedin,
			$this->viadeo,
			$this->uvs,
			$this->keepActive,
			$this->permissions,
			$this->removedPermissions,
			$this->badges,
			$this->options,
			$this->lastVisitHome,
			$this->createdAt,
			$this->updatedAt,
			$this->deletedAt,
		));
	}

	/**
	 * @see \Serializable::unserialize()
	 */
	public function unserialize($serialized)
	{
		list (
			$this->id,
			$this->login,
			$this->password,
			$this->studentId,
			$this->mail,
			$this->fullName,
			$this->firstName,
			$this->lastName,
			$this->formation,
			$this->niveau,
			$this->filiere,
			$this->phoneNumber,
			$this->phoneNumberPrivacy,
			$this->title,
			$this->room,
			$this->avatar,
			$this->sex,
			$this->sexPrivacy,
			$this->nationality,
			$this->nationalityPrivacy,
			$this->adress,
			$this->adressPrivacy,
			$this->postalCode,
			$this->postalCodePrivacy,
			$this->city,
			$this->cityPrivacy,
			$this->country,
			$this->countryPrivacy,
			$this->birthday,
			$this->birthdayPrivacy,
			$this->birthdayDisplayOnlyAge,
			$this->personnalMail,
			$this->personnalMailPrivacy,
			$this->language,
			$this->isStudent,
			$this->surnom,
			$this->jadis,
			$this->passions,
			$this->website,
			$this->facebook,
			$this->twitter,
			$this->linkedin,
			$this->viadeo,
			$this->uvs,
			$this->keepActive,
			$this->permissions,
			$this->removedPermissions,
			$this->badges,
			$this->options,
			$this->lastVisitHome,
			$this->createdAt,
			$this->updatedAt,
			$this->deletedAt,
		) = unserialize($serialized);
	}
}
